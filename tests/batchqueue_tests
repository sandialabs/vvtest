#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
from os.path import abspath
import time
from textwrap import dedent

import vvtestutils as vtu
import testutils as util

from batch.qinterface import BatchQueueInterface, extract_non_None_job_ids
from batch.batchfactory import construct_batch_system

import batch.helpers as helpers
import batch.subprocs as subprocs
import batch.slurm as slurm
import batch.lsf as lsf
import batch.craypbs as craypbs
import batch.pbs as pbs
import batch.moab as moab


class function_tests( vtu.vvtestTestCase ):

    def test_the_runcmd_function(self):
        ""
        os.mkdir('work')

        x,cmd,out = helpers.runcmd( [ 'uname', '-a' ] )

        assert x == 0
        assert os.uname()[1] in out.strip()
        assert 'uname' in cmd

        x,cmd,out = helpers.runcmd( ['diff','fakefile1','fakefile2'] )
        assert x != 0

        x,cmd,out = helpers.runcmd( ['/some/fake/path/asdjkfjkdskdfks'] )
        assert x != 0

        cmdL = [sys.executable,'-c','fp = open("mark","wt"); fp.close()']
        x,cmd,out = helpers.runcmd( cmdL, chdir='work' )
        assert x == 0 and os.path.isfile( 'work/mark' )

        cmdL = [sys.executable,'-c','print ( "grep_this_string" )']
        rtn,cout,cerr = util.call_capture_output( helpers.runcmd, cmdL, echo=True )
        x,cmd,out = rtn
        assert x == 0 and sys.executable in cmd and 'grep_this_string' in out
        assert sys.executable in cout and 'grep_this_string' in cout
        assert not cerr

    def test_queue_type_construction(self):
        ""
        for qtype in ['subprocs','craypbs','pbs','slurm','moab','lsf','flux']:
            bq = BatchQueueInterface( (12,None), {'batchsys':qtype} )
            assert bq.getNodeSize() == (12,None)

    def test_formatting_extra_flags(self):
        ""
        self.assertEqual( helpers.format_shell_flags( None ), [] )
        self.assertEqual( helpers.format_shell_flags( ('-f',) ), ['-f'] )
        self.assertEqual( helpers.format_shell_flags( '-V' ), ['-V'] )
        self.assertEqual( helpers.format_shell_flags( ['-v','var=val'] ), ['-v','var=val'] )
        self.assertEqual( helpers.format_shell_flags( '-v var=val' ), ['-v','var=val'] )
        self.assertRaises( ValueError, helpers.format_shell_flags, 23 )

    def test_clean_exit_marker_mechanism(self):
        ""
        bq = BatchQueueInterface( (12,None), {'batchsys':'subprocs'} )
        bq.writeJobScript( (1,1,0), 60, os.getcwd(), 'log', 'scr', 'sleep 3' )
        assert bq.checkForJobScriptExit( 'log' ) is False
        bq.submitJob( os.getcwd(), 'log', 'scr' )
        time.sleep(1)
        assert bq.checkForJobScriptExit( 'log' ) is False
        time.sleep(3)
        assert bq.checkForJobScriptExit( 'log' ) is True

    def test_extract_non_None_job_ids(self):
        ""
        self.assertEqual( extract_non_None_job_ids([]), [] )
        self.assertEqual( extract_non_None_job_ids([None]), [] )
        self.assertEqual( extract_non_None_job_ids(['a','1']), ['a','1'] )
        self.assertEqual( extract_non_None_job_ids(['a',None,'1']), ['a','1'] )


class failure_modes( vtu.vvtestTestCase ):
    """
    test the submission failure case and the total vvtest timeout case
    to make sure we know what to grep for to determine when they occur
    """

    def test_submit_failure(self):
        ""
        # use slurm system for this test

        write_mock_slurm_scripts( fake_submit_exception=True )

        util.writefile( 'atest.vvt', """
            pass
            """ )

        with util.set_environ( PATH=prepended_PATH('bin') ):
            vrun = vtu.runvvtest( '--total-timeout=5 --platopt batchsys=slurm',
                                  '--platopt ppn=4', batch=True )

        vrun.assertCounts( total=1, notrun=1 )
        assert vrun.grepLines('Batch submission failed')
        assert vrun.grepLines('fake submit exception')

    def test_total_timeout(self):
        ""
        util.writefile( 'atest.vvt', """
            import time
            time.sleep(10)
            """ )

        with util.set_environ( PATH=prepended_PATH('bin') ):
            vrun = vtu.runvvtest( '--total-timeout=5', batch=True )

        vrun.assertCounts( total=1, notdone=1 )
        assert vrun.grepLines('total timeout expired')


########## subprocs.py

class subprocs_tests( vtu.vvtestTestCase ):

    def test_nominal_execution(self):
        ""
        util.writefile( 'script', """
            echo "running script"
            touch """+abspath( 'touch.txt' )+"""
            """ )
        script = abspath('script')
        outfile = abspath('out.txt')

        obj = construct_batch_system( {'batchsys':'subprocs', 'ppn':8} )

        hdr = obj.header( (1,8,0), 123, abspath('out.txt') )

        jobid,cmd,out = obj.submit( script, outfile )

        time.sleep(1)
        while True:
            jobD,cmd,out = obj.query( [jobid] )
            if len(jobD) > 0:
                assert len( jobD ) == 1
                assert jobD[jobid] == 'running'
            else:
                break

        assert os.path.exists( 'touch.txt' )
        assert len( util.grepfiles( 'running script', 'out.txt' ) ) == 1


########## slurm.py

def write_mock_slurm_scripts( fake_submit_exception=False ):
    ""
    write_mock_helpers()

    if fake_submit_exception:
        write_mock_script( 'bin/sbatch', '', """
            raise Exception( 'fake submit exception' )
            """ )
    else:
        write_mock_script( 'bin/sbatch', """
            Submitted batch job 291041
            """,
            """
            jobscript = sys.argv[-1]
            ofile = get_header_option_value( jobscript, '#SBATCH --output=' )
            run_in_background( jobscript, ofile )
            """ )

    write_mock_script( 'bin/squeue', """
        15994641 PD
        16004759 PD
        16004368 R
        291041 CD
        16001384 CD
        """ )

    write_mock_script( 'bin/scancel', "" )


class slurm_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp(self)
        write_mock_slurm_scripts()
        os.environ['PATH'] = prepended_PATH( 'bin' )

    def test_implementation_functions(self):
        ""
        obj = construct_batch_system( { 'batchsys':'slurm',
                                        'ppn':16,
                                        'account':'foo',
                                        'QoS':'bar',
                                        'submit_flags': '--fake-flag=value' } )

        hdrL = obj.header( (3,8,0), 123, abspath('out.txt') )
        util.writefile( 'batchscript', '\n'.join( hdrL )+'\n' )

        assert len( util.greplines( 'SBATCH *--nodes=3', hdrL ) ) == 1
        assert len( util.greplines( 'SBATCH *--account=foo', hdrL ) ) == 1
        assert len( util.greplines( 'SBATCH *--qos=bar', hdrL ) ) == 1
        assert len( util.greplines( 'SBATCH *--fake-flag=value', hdrL ) ) == 1

        jobid,cmd,out = obj.submit( 'batchscript', 'out_filename' )
        self.assertEqual( jobid, '291041' )

        jobs,cmd,out = obj.query( [ '16004368', '16014368' ] )
        self.assertEqual( jobs, {'16004368':'running'} )

        obj.cancel( '123456' )
        cmdL = eval( util.readfile( 'bin/scancel.out' ).strip() )
        self.assertEqual( cmdL[1], '123456' )

    def test_submit_error(self):
        ""
        util.write_py_script( 'bin/sbatch', """
            raise Exception( 'fake exception' )
            """ )

        obj = construct_batch_system( { 'batchsys':'slurm'} )
        jobid,cmd,out = obj.submit( 'foo', 'bar' )
        # print ( out )
        assert jobid is None
        assert 'sbatch' in cmd
        assert 'fake exception' in out

    def test_batch_queue_interface(self):
        ""
        util.writefile( 'atest.vvt', """
            import vvtest_util as vvt
            """ )

        vrun = vtu.runvvtest( '--total-timeout=5 --platopt batchsys=slurm',
                              '--platopt ppn=4 --platopt submit_flags=--fake-flag',
                              '--platopt PT=foobar',
                              batch=True )
        vrun.assertCounts( total=1, npass=1 )
        assert not vrun.grepLines('*** Batch submission failed')
        assert not vrun.grepLines('*** vvtest: total timeout expired')
        fn = util.globfile( 'TestResults*/batchset*/qbat.0' )
        assert '#SBATCH --account=foobar' in util.readfile(fn)
        assert '#SBATCH --fake-flag' in util.readfile(fn)


########## lsf.py

def write_mock_lsf_scripts():
    ""
    write_mock_helpers()

    write_mock_script( 'bin/bsub', """
        Job <68628> is submitted to default queue <normal>.
        """,
        """
        jobscript = sys.argv[-1]
        ofile = get_header_option_value( jobscript, '#BSUB -o ' )
        run_in_background( jobscript, ofile )
        """ )

    write_mock_script( 'bin/bjobs', """
        68828   PEND
        68728   RUN
        """ )

    write_mock_script( 'bin/bkill', "" )


class lsf_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp(self)
        write_mock_lsf_scripts()
        os.environ['PATH'] = prepended_PATH( 'bin' )

    def test_implementation_functions(self):
        ""
        obj = construct_batch_system( {'batchsys':'lsf', 'ppn':44} )

        hdrL = obj.header( (3,8,0), 123, abspath('out.txt') )
        util.writefile( 'batchscript', '\n'.join( hdrL )+'\n' )

        assert len( util.greplines( 'BSUB *-nnodes 3', hdrL ) ) == 1

        jobid,cmd,out = obj.submit( 'batchscript', 'out_filename' )
        self.assertEqual( jobid, '68628' )

        jobs,cmd,out = obj.query( [ '68828', '68728', '38594' ] )
        self.assertEqual( jobs, {'68828': 'pending', '68728': 'running'} )

        obj.cancel( '123456' )
        cmdL = eval( util.readfile( 'bin/bkill.out' ).strip() )
        assert len(cmdL) == 2 and cmdL[1] == '123456'

    def test_batch_queue_interface(self):
        ""
        util.writefile( 'atest.vvt', """
            import vvtest_util as vvt
            """ )

        vrun = vtu.runvvtest( '--total-timeout=5 --platopt batchsys=lsf',
                              '--platopt ppn=4 --platopt extra_flags=--fake-flag',
                              batch=True )
        vrun.assertCounts( total=1, npass=1 )
        assert not vrun.grepLines('*** Batch submission failed')
        assert not vrun.grepLines('*** vvtest: total timeout expired')
        assert '--fake-flag' in util.readfile( 'bin/bsub.out' )


########## craypbs.py

def write_mock_craypbs_scripts():
    ""
    write_mock_helpers()

    write_mock_script( 'bin/msub', """
        123457.sdb
        """,
        """
        jobscript = sys.argv[-1]
        ofile = get_header_option_value( jobscript, '#MSUB -o ' )
        run_in_background( jobscript, ofile )
        """ )

    write_mock_script( 'bin/showq', """
        123456.sdb n/a Running field
        12345.sdb n/a Running field
        123467.sdb n/a Idle field
        """ )

    # batch cancel not implemented for craypbs


class craypbs_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp(self)
        write_mock_craypbs_scripts()
        os.environ['PATH'] = prepended_PATH( 'bin' )

    def test_implementation_functions(self):
        ""
        obj = construct_batch_system( {'batchsys':'craypbs', 'ppn':16} )

        hdrL = obj.header( (3,8,0), 123, abspath('out.txt') )
        util.writefile( 'batchscript', '\n'.join( hdrL )+'\n' )

        assert len( util.greplines( 'MSUB*nodes*3', hdrL ) ) == 1

        jobid,cmd,out = obj.submit( 'batchscript', 'out_filename' )
        self.assertEqual( jobid, '123457.sdb' )

        jobs,cmd,out = obj.query( [ '12345.sdb', '123467.sdb', '7345.sdb' ] )
        self.assertEqual( jobs, {'123467.sdb':'pending', '12345.sdb':'running'} )

    def test_batch_queue_interface(self):
        ""
        util.writefile( 'atest.vvt', """
            import vvtest_util as vvt
            """ )

        vrun = vtu.runvvtest( '--total-timeout=5 --platopt batchsys=craypbs',
                              '--platopt ppn=4 --platopt account=foobar',
                              batch=True )
        vrun.assertCounts( total=1, npass=1 )
        assert not vrun.grepLines('*** Batch submission failed')
        assert not vrun.grepLines('*** vvtest: total timeout expired')
        fn = util.globfile( 'TestResults*/batchset*/qbat.0' )
        assert '#MSUB -A foobar' in util.readfile(fn)


########## pbs.py

def write_mock_pbs_scripts():
    ""
    write_mock_helpers()

    write_mock_script( 'bin/qsub', """
        123456.ladmin1
        """,
        """
        jobscript = sys.argv[-1]
        ofile = get_header_option_value( jobscript, '#PBS -o ' )
        run_in_background( jobscript, ofile )
        """ )

    write_mock_script( 'bin/qstat', """
        123466.ladmin1 field1 field2 field3 Q field6
        12345.ladmin1 field1 field2 field3 R field6
        123457.ladmin1 field1 field2 field3 C field6
        """ )

    # batch cancel not implemented for pbs


class pbs_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp(self)
        write_mock_pbs_scripts()
        os.environ['PATH'] = prepended_PATH( 'bin' )

    def test_implementation_functions(self):
        ""
        obj = construct_batch_system( {'batchsys':'pbs', 'ppn':16} )

        hdr = obj.header( (1,8,0), 123, abspath('out.txt') )
        util.writefile( 'batchscript', hdr+'\n' )
        assert 'PBS' in hdr

        jobid,cmd,out = obj.submit( 'batchscript', 'out_filename' )
        self.assertEqual( jobid, '123456.ladmin1' )

        jobs,cmd,out = obj.query(
                    [ '12345.ladmin1', '123466.ladmin1', '7345.ladmin1' ] )
        self.assertEqual( jobs, {'123466.ladmin1':'pending',
                                 '12345.ladmin1':'running'} )

    def test_batch_queue_interface(self):
        ""
        util.writefile( 'atest.vvt', """
            import vvtest_util as vvt
            """ )

        vrun = vtu.runvvtest( '--total-timeout=5 --platopt batchsys=pbs',
                              '--platopt ppn=4 --platopt submit_flags=--fake-flag',
                              batch=True )
        vrun.assertCounts( total=1, npass=1 )
        assert not vrun.grepLines('*** Batch submission failed')
        assert not vrun.grepLines('*** vvtest: total timeout expired')
        assert '--fake-flag' in util.readfile( 'bin/qsub.out' )


########## moab.py

def write_mock_moab_scripts():
    ""
    write_mock_helpers()

    write_mock_script( 'bin/msub', """
        123456.ladmin1
        """,
        """
        jobscript = sys.argv[-1]
        ofile = get_header_option_value( jobscript, '#MSUB -o ' )
        run_in_background( jobscript, ofile )
        """ )

    write_mock_script( 'bin/showq', """
        123466.ladmin1 field1 Deferred field3
        12345.ladmin1 field1 Running field3
        123457.ladmin1 field1 Idle field3
        """ )

    # batch cancel not implemented for moab


class moab_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp(self)
        write_mock_moab_scripts()
        os.environ['PATH'] = prepended_PATH( 'bin' )

    def test_implementation_functions(self):
        ""
        obj = construct_batch_system( {'batchsys':'moab', 'ppn':16} )

        hdr = obj.header( (1,8,0), 123, abspath('out.txt') )
        util.writefile( 'batchscript', hdr+'\n' )
        assert 'MSUB' in hdr

        jobid,cmd,out = obj.submit( 'batchscript', 'out_filename' )
        self.assertEqual( jobid, '123456.ladmin1' )

        jobs,cmd,out = obj.query(
                    [ '12345.ladmin1', '123466.ladmin1', '7345.ladmin1' ] )
        self.assertEqual( jobs, {'123466.ladmin1':'pending',
                                 '12345.ladmin1':'running'} )

    def test_batch_queue_interface(self):
        ""
        util.writefile( 'atest.vvt', """
            import vvtest_util as vvt
            """ )

        vrun = vtu.runvvtest( '--total-timeout=5 --platopt batchsys=moab',
                              '--platopt ppn=4 --platopt submit_flags=--fake-flag',
                              batch=True )
        vrun.assertCounts( total=1, npass=1 )
        assert not vrun.grepLines('*** Batch submission failed')
        assert not vrun.grepLines('*** vvtest: total timeout expired')
        assert '--fake-flag' in util.readfile( 'bin/msub.out' )


########## flux.py

def write_mock_flux_scripts( fake_submit_exception=False ):
    ""
    write_mock_helpers()

    if fake_submit_exception:
        write_mock_script( 'bin/flux', '', """
            raise Exception( 'fake submit exception' )
            """ )
    else:
        write_mock_script( 'bin/flux', '',
            """
            if sys.argv[1] == 'batch':
                jobscript = sys.argv[-1]
                ofile = get_header_option_value( jobscript, '#FLUX: --output=' )
                run_in_background( jobscript, ofile )
                print( 'asdf5' )
            elif sys.argv[1] == 'jobs':
                print( dedent('''
                    asdf1 DEPEND
                    asdf2 SCHED
                    asdf3 RUN
                    asdf4 CLEANUP
                    asdf5 INACTIVE
                    ''' ) )
            elif sys.argv[1] == 'cancel':
                pass
            """ )


class flux_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp(self)
        write_mock_flux_scripts()
        os.environ['PATH'] = prepended_PATH( 'bin' )

    def test_implementation_functions(self):
        ""
        obj = construct_batch_system( { 'batchsys':'flux',
                                        'ppn':16,
                                        'submit_flags': '--fake-flag=value' } )

        hdrL = obj.header( (3,8,0), 123, abspath('out.txt') )
        util.writefile( 'batchscript', '\n'.join( hdrL )+'\n' )

        assert len( util.greplines( 'FLUX: *--nodes=3', hdrL ) ) == 1
        assert len( util.greplines( 'FLUX: *--fake-flag=value', hdrL ) ) == 1

        jobid,cmd,out = obj.submit( 'batchscript', 'out_filename' )
        self.assertEqual( jobid, 'asdf5' )

        jobs,cmd,out = obj.query( [ 'asdf2', 'asdf3' ] )
        self.assertEqual( jobs, {'asdf2':'pending', 'asdf3':'running'} )

        obj.cancel( 'asdf3' )
        cmdL = eval( util.readfile( 'bin/flux.out' ).strip() )
        self.assertEqual( cmdL[2], 'asdf3' )

    def test_submit_error(self):
        ""
        util.write_py_script( 'bin/flux', """
            raise Exception( 'fake exception' )
            """ )

        obj = construct_batch_system( { 'batchsys':'flux'} )
        jobid,cmd,out = obj.submit( 'foo', 'bar' )
        # print ( out )
        assert jobid is None
        assert 'batch' in cmd
        assert 'fake exception' in out

    def test_batch_queue_interface(self):
        ""
        util.writefile( 'atest.vvt', """
            import vvtest_util as vvt
            """ )

        vrun = vtu.runvvtest( '--total-timeout=5 --platopt batchsys=flux',
                              '--platopt ppn=4 --platopt submit_flags=--fake-flag',
                              '--platopt PT=foobar',
                              batch=True )
        vrun.assertCounts( total=1, npass=1 )
        assert not vrun.grepLines('*** Batch submission failed')
        assert not vrun.grepLines('total timeout expired')
        fn = util.globfile( 'TestResults*/batchset*/qbat.0' )
        assert '#FLUX: --fake-flag' in util.readfile(fn)



########################################################################

def write_mock_helpers():
    ""
    util.writefile( 'bin/mockutils.py', """
        import subprocess

        def get_header_option_value( jobscript, option_marker ):
            ""
            with open( jobscript, 'rt' ) as fp:
                for line in fp:
                    L = line.strip().split( option_marker )
                    if len(L) > 1:
                        if L[-1]:
                           return L[-1]
                        else:
                            raise Exception( 'marker value empty: '+repr(option_marker) )

            raise Exception( 'marker not found: '+repr(option_marker) )

        def run_in_background( jobscript, outputfile ):
            ""
            with open( outputfile, 'wt' ) as fp:
                subprocess.Popen(
                    'timeout 10 /bin/bash '+jobscript, shell=True,
                    stdout=fp.fileno(), stderr=subprocess.STDOUT )
        """ )


def write_mock_script( filename, print_this, execute_this=None ):
    ""
    lines = [ 'import os, sys, subprocess',
              'from mockutils import get_header_option_value, run_in_background',
              'from textwrap import dedent' ]

    # a file is always written that contains the script arguments
    lines.extend( [
            "with open( '"+abspath(filename)+'.out'+"', 'wt' ) as fp:",
            "    fp.write( str(sys.argv) + os.linesep )" ] )

    if execute_this:
        lines.extend( [ '', dedent( execute_this ) ] )

    if print_this:
        lines.extend( [
            "print ( '''",
            dedent( print_this ).strip(),
            "''' )" ] )

    util.write_py_script( filename, '\n'.join(lines)+'\n' )


def prepended_PATH( path ):
    ""
    if 'PATH' in os.environ:
        return abspath(path)+':'+os.environ['PATH']
    else:
        return abspath(path)


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
