
Improvements:

    - Add support for the Flux batch system.  Some documentation is here
      https://flux-framework.readthedocs.io/.  To use, add the option
      "--platopt batchsys=flux" to the vvtest command line.

    - Many user plugin functions take a dictionary representing a given test.
      This dictionary now contains an entry called 'testid' whose value is
      the same as the one used to identify tests from saved test results files.
      Which means it can disambiguate tests from multiple test repositories.

    - Add new option, --results-update=<SPECS>, that can be used with
      --save-results for removing old test results files.  Currently, SPECS
      must be a number indicating the number of days to retain test results
      files.

    - Two new command line options were added:

        -z : Excludes tests that are not the analyze test of a
             parameterize/analyze test group
        -Z : Excludes tests that are the analyze test of a
             parameterize/analyze test group

    - Three new flags were added to the vvtest_util.py file for each test:

        is_baseline : True when rebaselining (when the -B or -b flag is given)
        is_analyze  : True if this test is analyze test of a parameterize/analyze
        is_analysis_only : True if the -a / --analyze command line flag is given

      The 'is_analysis_only' variable supersedes (and deprecates) the
      'opt_analyze' variable and the --execute-analysis-sections test command
      line option.

Fixes:

    - Fix potential issue with test parameter generation via a "generator".
      When test dependencies are specified by the generator script, it was
      possible that a dependency would not get added due to Python dict
      ordering.  This issue was found by a GitHub vvtest user and fixed
      using their suggestion.

Changes:

    - The `-o` and `-O` command line options were not allowed when the current
      workin directory is inside a TestResults directory.  Now they are as long
      as they are the same as the values that created the TestResults directory
      in the first place.

    - The old test results analysis and HTML summary capability has been
      removed, including the entry points reports.py and results.py.  However,
      the capability to store test results files and use them to compute
      runtimes has been retained and made easier to use.  See wiki page on
      Saving and Using Test Runtimes.

    - When the -a or --analyze option is given on the vvtest command line, the
      --execute-analysis-sections option is placed on the test script command
      line.  Also, the 'opt_analyze' boolean is set in the vvtest_util.py file
      in this case.  Now these are both deprecated and will be removed next
      release.  The capability is replaced with the 'is_analysis_only' boolean
      variable in the vvtest_util.py file.


==============================================================================

Release 1.5
-----------

Nov 24, 2023

Improvements:

    - The parameter generator feature now allows more than one dependency
      to be specified per test instance.

    - The absolute path of the test execution directory is now added to
      PYTHONPATH for test script invocation (along with an empty path). This
      is more resilient in the case that a preload script removes empty paths
      from the PYTHONPATH.

    - For better Windows support, if the test_preload() plugin function returns
      a filename with a ".py" extension, then Python is used to execute it.

    - A set of tests can now be partitioned and stored in testlist files to
      be run separately. Adding the --partition <int> option along with -g will
      cause vvtestlist.* files to be created. The tests in these files can be
      run with vvtest by putting the testlist filename on the vvtest command
      line, such as

          $ vvtest --run-dir r0 vvtestlist.0
          $ vvtest --run-dir r1 vvtestlist.1

    - Test results output can now be sent to a JSON formatted file,
      with option --json <filename>.

    - The parameter generator feature has been enhanced to allow test
      dependencies to be specified for each test. The generator script
      can now print a second line which contains a JSON encoded list
      of {testname: { test parameters }} entries.

    - Add -q command line option for quieter operation. Using -q without -v
      will only show a progress bar as tests execute rather than the verbose
      test launch and finish console output.

    - A new option, -B, has been added which is similar to the -b option.
      Using -b means perform a re-baseline operation on tests that "diff".
      Using -B means re-baseline on all tests regardless of result status.

    - The parameterize directive can now use an external script to generate
      the parameter names and associated values. For example,

          #VVT: parameterize (generator) : myscript.py --my-args

      will call myscript.py for a JSON encoded list of dictionaries that
      contains the sets of parameter name=value.

    - To complement the parameterize autotype directive attribute, specific
      types can be specified. Valid types are int, float, and str. For example,

          #VVT: parameterize (int,float) : N,val = 4,4.1  8,4.2

Fixes:

    - The script_util.standard_utilities have a way to register a function
      that runs when the test script exits. When using Python3, calling
      exit_diff() inside the termination function was not returning a diff
      exit status. Now fixed.

Changes:

    - The deprecated script_util_plugin.sh file is no longer sourced in the
      vvtest_util.sh file. This would only affect bash script tests.

    - The old, deprecated platform plugin mechanism has been removed.

    - Similar to the handling of PYTHONPATH, the manipulation of the PATH
      environment variable is now done prior to test launch rather than in
      the vvtest_util.py and vvtest_util.sh file.

    - Contrary to a statement below, the PYTHONPATH is now loaded with all
      necessary paths before a test is launched. The manipulation of sys.path
      in the vvtest_util.py file has been removed.

    - The deprecated functions in trig/perms.py have been removed.

    - Some deprecated utility files have been removed: runcmd.py, runjob.py,
      runjob_remote.py, runner, trigger.py, and triglog.py.  The rest of the
      files in the "trig" directory are now deprecated as well. In the future,
      the ones still used by vvtest will be moved into the "libvvtest"
      directory and the others removed.

    - Support for the XML test format has been removed.

    - A test script that is executable will be run directly (using the #!
      mechanism). Now when a plugin preload function returns a file path,
      that path will always be used to run the test (when before the test
      would still be run directly).

    - Python 2.6 is no longer supported. Now vvtest supports Python 2.7 and
      3.2 or newer.


==============================================================================

Release 1.4
-----------

Nov 09, 2022

Improvements:

    - A new user plugin function was added, test_runtime(), which can be used
      to set the runtime of tests. Test runtimes are used for some command line
      options, such as --tmin, --tmax, and --tsum.

    - Failed "depends on" specifications are now printed before tests are
      actually run. This means the messages will show up when using the '-g'
      option. Also, additional information is given about the failure.

    - The --run-dir option can now contain multiple path segments and/or can
      be an absolute path.

    - The script_util.platform_expr() and script_util.option_expr() now take
      shell-style wildcards in the expressions. For example,

          import vvtest_util as vvt
          from script_util import platform_expr
          if platform_expr('Lin*'):
              print ( "the platform name matches the expression" )

    - The list of test keywords is now available as a variable in the
      vvtest_util.py and vvtest_util.sh script fragments, such as

          KEYWORDS = ['foo','bar']

    - The environment variable VVTEST_PLATFORM_SPECS can be used to specify
      platform settings, such as the batch system, the max number of cores
      available, the cores per node, the devices per node, etc. The syntax
      is comma separated name=value. For example,

          VVTEST_PLATFORM_SPECS="batchsys=slurm,cores_per_node=44"

      The platform settings precedence is command line first, then this
      environment variable, then user plugin values, then builtin values.

    - The following two groups of variables will now always be defined in the
      vvtest_util.py and vvtest_util.sh files:

          RESOURCE_np =
          RESOURCE_IDS_np =
          RESOURCE_TOTAL_np =

          RESOURCE_ndevice =
          RESOURCE_IDS_ndevice =
          RESOURCE_TOTAL_ndevice =

      If there are no devices (GPUs), then ndevice and total ndevice are zero.

    - A soft link to vvtest and a config directory can now be used (without
      using the vvtest_bootstrap.py mechanism).

    - Including files into test headers (a.k.a, inserting directive files)
      can now have testname, platform, and option attributes. For example,

          #VVT: include (testname=foo) : afile.txt
          #VVT: include (platform="Linux or XBox") : bfile.txt
          #VVT: include (option="dbg and not gprof") : cfile.txt

    - The "insert directive file" now has an alias, "include". For example,
      this will insert the file "myfile.txt" during directive processing:

          #VVT: include : myfile.txt

    - The keywords specification in a test header can now use the "parameters"
      attribute, such as

          #VVT: keywords (parameters="np=1") : fast
          #VVT: keywords (parameters="np=8") : long

      In effect, keywords can be set according to the parameters in the test.

    - A test can now define the number of resources using the 'nnode' parameter.
      For example,

          #VVT: parameterize : nnode = 1 2 4

      A test instance with nnode=1 will occupy a single compute node on a
      batched system or the whole workstation in direct mode. A test with
      nnode=2 will occupy two compute nodes.

    - Add handling of a VVTEST_PLATFORM environment variable in the
      config/idplatform.py configuration script.  Now if that environment
      variable is defined, then the value is used as the platform name.

    - Unknown attributes in *.vvt header file directives now cause a parse
      failure.

    - Add test parameter substitution in "depends on" patterns. Consider a test
      with the following directives:

          #VVT: parameterize : toy = ball doll
          #VVT: depends on : name*toy=${toy}*

      The pattern "${toy}" will be replaced with the value of the parameter as
      defined in the test instance. In this case, there are two test instances,
      one with toy=ball and the other toy=doll.

    - Add option --minimal-xdirs, which suppresses parameter name=value strings
      in test execution directory names if the parameter only has one value in
      the test. For example, a test file named 'foo.vvt' with

          #VVT: parameterize : material = steel
          #VVT: parameterize : shape = square round

      would result in execution directory names

          foo.shape=square
          foo.shape=round

      The parameter 'material' is still defined in the vvtest_util.py file.

Fixes:

    - An analyze test will be run even if some of its dependencies are skipped
      due to filters, such as the -p option. However, it would also be run if
      all dependencies were skipped. A change was made to also skip the analyze
      test if all dependencies are skipped.

    - A previous refactoring broke the use of the 'extra_flags' and 'submit_flags'
      platform options, such as

          $ vvtest --batch --platopt extra_flags="--license=gpfs"

      Both of those options work again (which adds arbitrary flags to batch
      submissions).

    - After using the --run-dir option to name the test results directory,
      a subsequent vvtest run would not recognize the directory as containing
      test results. The effect was that vvtest would "find" and run more
      tests than it should. This was fixed by using a "vvtest.cache" file
      as a marker file in test results directories.

    - Fix bug when using --minimal-xdirs. Staged tests would fail to run
      correctly if there was also a single valued parameter.

    - A bug was fixed when using -S name=value with multiple staged tests.

    - A bug was fixed when using --minimal-xdirs and a test used a "depends on"
      pattern with suppressed (or hidden) parameters.

    - For running on batched systems, filtering based on num cores (np) and
      num devices (ndevice) is now turned off by default (where default means
      no max given in the platform plugin or on the command line). However,
      for devices (GPUs), the max will be zero unless devices_per_node is
      set for the platform.

Changes:

    - The XML test format is now officially deprecated and will be removed
      at some future point. As a result, the default --scan-type option value
      has changed. By default, only "*.vvt" files will now be scanned. To use
      the previous behavior, add "--scan-type vvt,xml" to the vvtest command
      line.

    - For each test, the vvtest_util.py and .sh files are written to the
      test execution directory, and those contain the TESTID variable. The
      value of this variable has changed a little when the --minimal-xdirs
      option is given and for staged tests. The value now is always the same
      regardless of whether --minimal-xdirs is given or not. Also, the stage
      info is added for staged tests.

    - Using -S param=value on a test with a staged parameter will now retain
      the number of stages as defined by the test's list of values.

    - A test with duplicate parameter values will no longer create a parse
      error. Instead, duplicate values are silently removed.

    - The platform configuration mechanism has been refactored, and the old
      way is now considered deprecated (expected to be removed in Feb 2023).

      The idplatform.py file in a config directory is used to specify the
      platform name, the compiler name, and to specify platform parameters,
      such as the batch system type, the max num cores on the machine, etc.

      Here is an example idplatform.py file with the new functions:

          def get_platform():
              return "XBox"

          def get_compiler( platname, options ):
              return "Intel"

          def load_specifications( specs, platname, cplrname, options ):
              specs['batchsys'] = 'slurm'
              specs['cores_per_node'] = 44

      To transition from old to new, replace

          idplatform.platform(optdict) with idplatform.get_platform()

          idplatform.compiler(platname,optdict) with
                idplatform.get_compiler(platname,options)

          platform_plugin.initialize(plat) with
                idplatform.load_specifications(specs,platname,cplrname,options)

      To be clear, the platform_plugin.py file can be removed (is deprecated).

    - The topic-based inline documentation has been removed. The wiki pages
      cover mostly the same thing, but the inline documentation was placed
      in the wiki pages in case it is useful.

    - The Python sys.path has the config directory(ies) and a few other paths
      added for each test. This is done at the process level when running the
      test itself (by using PYTHONPATH), and also happens when a test script
      imports vvtest_util.py. The PYTHONPATH mechanism is now deprecated.
      When it is removed, tests that do not import vvtest_util.py may break.

    - Probably not used, but the vvtest_util.sh script sources script_util.sh
      from vvtest/config/ and a file called script_util_plugin.sh from the
      user supplied config directory(ies). This behavior has changed a little.
      Now both script_util.sh and script_util_plugin.sh are sourced if they
      exist in the user supplied config or vvtest config directories. And
      the script_util_plugin.sh script name is decprecated, and will be
      removed at a future date.

    - Platform options are now examined to make sure they are known. They
      are set via the vvtest command line option --platopt name=value, and in
      the config/platform_plugin.py file.

    - When running vvtest --batch mode, the batch scripts are written to
      a working directory and submitted to the batch queue, then monitored.
      There was a mechanism to insert code (called a shim) into this batch
      script in order to setup the environment. This shim capability has
      been removed. It is not being used and is not really necessary, because
      batch systems will forward the environment from the login nodes to the
      batch job anyway.

    - The CPU probe now returns the physical number of cores (rather than
      the hyperthreaded count). This may affect the number of concurrent
      tests run on a workstation. It can be overridden with -N <integer>.

    - The VVTEST_TIMEOUT environment variable made available to each test
      execution used to add a "bump factor". This bump has been removed.
      Tests can use the timeout to ensure all the MPI processes will die.
      However, the test should not die before the timeout because otherwise
      vvtest will not recognize it as having timed out.

    - The -e option has been deprecated. It is still parsed but does nothing.

    - The deprecated -s option is no longer recognized. Use --search instead.

    - Unlikely it is still being used, but the function construct_Platform()
      in the file libvvtest/vvplatform.py has been removed. It was a way to
      share vvtest platform variables from the platform_plugin.py file, but
      a better way is to define them in the environment ahead of time, or
      share a script between platform_plugin.py and other scripts.

    - Deprecate some features in the trig/perms.py module. It is no longer
      executable and cannot be used as an entry point (use trig/chperms
      instead). The following functions in perms.py are now deprecated (but
      still exist for now): permission(), change_filemode(), i_own(),
      replace_conditional_execute(), change_group(), apply_itemized_chmod(),
      can_map_group_name_to_group_id(), apply_chmod(), chmod_recurse().

    - Deprecate some job automation tools in the trig directory: runjob.py,
      runner, runjob_remote.py, trigger.py, triglog.py, command.py, runcmd.py.
      The tests have been removed, but the files will be removed later.


==============================================================================

Release 1.3
-----------

Oct 22, 2021

Improvements:

    - Platform expressions used to include/exclude tests to run are now case
      insensitive. So if a test header had

          #VVT: enable (platforms=CTS*)

      and the vvtest platform name was "cts1", then the test would run.
      Other platform expressions in the test file are also case insensitive,
      such as

          #VVT: timeout (platform=CTS*) : 4h

    - When writing test files, header directives can now continue across
      comment lines, such as

          #VVT: parameterize : np = 1
          #
          #VVT:              : 2
          #  a comment line
          #VVT:              : 4

      However, a blank line still stops possible continuation on a subsequent
      line.

    - Wildcard expressions (aka glob'ing) has been added. On the command line,
      wildcards are allowed for -k, -K, -x, and -X. For example,

          $ vvtest -k "foo*"

      would select all tests that have a keyword starting with "foo". In test
      files, wildcards are allowed in expressions for testname, platform, and
      options. For example,

          #VVT: parameterize (testname=foo*) : np = 32
          #VVT: link (platforms="CTS-* or Linux") : file.in
          #VVT: timeout (options="intel or cuda-*") : 1234

    - The curl program can now be used to submit CDash results data. Add
      "method=curl" to your --cdash attributes, such as

          --cdash 'http://my.com/cdash,project=Proj,method=curl'

      Options can be added, such as "method=curl -v -k".

    - Add "expect" trailing attribute to "testname" directive, such as

          #VVT: testname = pluto (depends on=charon.*, expect=1)

    - Add --total-timeout command line option, which shuts down vvtest after
      some length of time. It is a controlled shutdown so that test results
      are finalized, for example. The total timeout value can be negative or
      zero for no shutdown, or a positive value for a timeout. Formats
      are the same as for --max-timeout.

    - Add convenience formats for specifying time lengths on the command line
      and in test specification files. The -T and --max-timeout options now
      understand "10m", "10:00", "2h 30m 5s", and "2:30:05". This format is
      also available in test specifications:

          #VVT: timeout = 2h

    - Add TIMEOUT to the variables in the vvtest_util.py and vvtest_util.sh
      test helpers. This contains the timeout value used by vvtest to kill
      the test if it takes too long.

    - Using --perms "g+s" will set the setgid bit on files and directories.
      A capital "S" is now allowed, such as --perms "g+S", which will only
      set the setgid bit on directories.

Fixes:

    - 

Changes:

    - Platform expressions in the test files are now case insensitive.

    - By default, the name of a test is the basename of the test filename.
      For example, the test name of the test produced by file "atest.vvt"
      will be "atest". This basename is now checked for validity (it must
      be a valid test name, which means no spaces or certain special
      characters like an astrisk or square bracket). Note that the test name
      can be specified in the file content, in which case the filename does
      not matter. For example, one could add

          #VVT: testname = foobar

    - The option given to a test script when the command line -a or --analyze
      option was given to vvtest is '--execute-analysis-sections'. The old
      option name has been removed: '--execute_analysis_sections'.

    - The value of the VVTEST_TIMEOUT environment variable made available to
      each test execution adds a "bump factor". This bump factor is now
      deprecated - in the future it will be the exact timeout value. The
      timeout has been used to cause processes spawned by mpiexec to die even
      if they are not children processes of the test. The reason for the bump
      factor was to make sure vvtest recognizes a timeout rather than a
      normal completion (although probably a fail result).

    - In the trig subdirectory, using the file perms.py as a script is now
      deprecated. Use chperms instead.

    - Using the command line option --perms changed slightly. A value of lower
      case "x" was unconditionally converted to an upper case "X". This no
      longer happens.

    - The previously deprecated TIMEOUT environment variable, which is set for
      each test prior to execution, has been removed. Use VVTEST_TIMEOUT
      instead.

    - The previously deprecated -F option is no longer recognized. Use -R
      instead.

    - The previously deprecated --pipeline option is no longer recognized.
      Use --batch instead.

    - The previously deprecated --qsub-limit option is no longer recognized.
      Use --batch-limit instead.

    - The previously deprecated --qsub-length option is no longer recognized.
      Use --batch-length instead.

    - The previously deprecated --check option is no longer recognized. Use
      the --test-args option for a similar behavior.


==============================================================================

Release 1.2
-----------

Sep 13, 2020

Improvements:

    - A test can now exit with a special exit status that marks the test as
      a skip. The target use case is when a test cannot run due to the lack
      of a resource or product on the platform. If deciding such a thing
      requires some probing, then it must be done at run time. In a test,
      you could do this

        import vvtest_util as vvt
        sys.exit( vvt.skip_exit_status )

    - Add files=* and filemax=* attributes to CDash options. For example,
        --cdash "http://my.com/cdash, project=Proj, files=all, filemax=1MB"
      For more info, see the wiki or run vvtest help results.

    - Add --user-args ARGS command line option, which is ignored by vvtest
      except to pass through arbitrary arguments to the prologue() user plugin
      function.

    - Add option to print the timeout for each test, to be used with the -i
      option, such as "vvtest -i -t" or "vvtest -i --show-times". The algorithm
      for computing timeouts is followed as if a normal vvtest execution would
      be performed.

    - Adjust script parsing to allow solitary strings (doc strings) at the
      top of tests (before the #VVT: comment directives).

    - Add --short-xdirs option and default to a value of 100. With lots of
      parameters and values, the test execution directories can grow quite
      long and even fail on some file systems. Now by default, tests with
      names longer than 100 characters are hashed and the test is executed
      in the shorter named directory.

    - Add "expect" attribute to the "depends on" directive. A test with
      directive

        #VVT: depends on (expect=2) : foo*bar

      will only run if the number of tests that match the shell expression
      "foo*bar" is exactly two. Possible values for "expect" are '+' for
      one or more (this is the default), '?' for zero or one, '*' for zero
      or more, and a non-negative integer.

    - Add additional CDash specifications. You can now say, for example,

        --cdash "https://sparky.com/cdash,project=Proj,group=Big Deal"

      The specification must start with a file name or a URL, then follow
      with name=value attributes separated by commas. The attributes are
      project, group, site, name, and date. The "date" must be seconds
      since epoch.

    - Add the command line for each test to the CDash report file & submission.

    - Add the command line to the test information sent into the user plugin
      epilogue() function. Also, make the 'timeout' value reflect the vvtest
      computed timeout rather than the test specified timeout. Lastly, add
      a 'skip' entry for tests that were skipped.

    - Add formal support for "devices", such as GPUs.  Tests can now specify
      an "ndevice" parameter in test files (analogous to "np"):

        #VVT: parameterize : ndevice = 0 2 4

      By default, no devices are assumed on the platform.  Tell vvtest there
      are devices with --max-devices <integer>, which is analogous to -N.
      You can use --devices <integer> as well to specify how many devices to
      actually use (analogous to -n).  To oversubscribe devices, use
      --max-devices 4 --devices 8, for example.

    - The --search option now searches the test source file by default.

    - Add support for Kitware CDash.  The --cdash <file or URL> option will
      cause vvtest to either write an XML file in CDash format to the given
      file name, or to write and submit an XML file to a CDash URL.  If a
      URL, the --cdash-project <name> option must be given so the CDash server
      knows which project to store the test results.

    - Add support for the LSF batch queue manager.

    - Batch jobs that have started are now cancelled upon keyboard interrupt.
      Currently only implemented for SLURM.

    - Optionally, the --save-results command line option can specify a
      directory, such as --save-results=/some/directory (using an equals
      sign is required).

    - The --save-results directory can now be scp-like, such as
      "sparky:/some/path" or "sparky.gov:relative/path", in which case
      vvtest will scp the test results file to a remote machine.

    - The vvtest_util.py and .sh utility files now contain a list of
      processor ids, RESOURCE_IDS_np, and the total number of processors
      available, RESOURCE_TOTAL_np.  The id list will be integers between
      zero and the value of -n, and the second will be the value of -N.
      Both -n and -N default to the number of processors on the machine,
      if available.

    - The batch queue files are now soft linked into the test execute
      directories to make it easier to associate a test with the queueing
      behavior.

    - The VVTEST_CONFIGDIR environment variable string or the command line
      option --config, can now contain multiple directories separated by a
      colon (like PYTHONPATH).  More than one --config option is also allowed.
      This allows multiple config directories to be specified.

    - Add --scan-type <type> command line argument, where 'type' can be
      "xml" or "vvt".  This restricts the test scanning to tests of the
      given type.

    - Add user plugin functions:

        def prologue( command_line ):
          pass

        def epilogue( testdict ):
          pass

      which are called during startup and during shutdown, respectively.
      The 'command_line' is a python list of the command line arguments.
      The 'testdict' is a dictionary of test ids to another dictionary
      containing test information, including

          result -> pass, fail, diff, timeout, notrun, notdone, or skip
          runtime -> num seconds or None if not run
          rundir -> the test execution directory

      Note that only epilogue() is called during shutdown when in information
      mode, such as "vvtest -i".

    - Parameter typing is now supported (relevant only for python script
      tests).  You can now add in your test header, for example,

          #VVT: parameterize (autotype) : np = 1 32 256
          #VVT: parameterize (autotype) : dx = 0.1  0.01  0.001

      and the parameter values in the vvtest_util.py file will be typed
      (np will be an int, and dx will be a float).

Fixes:

    - Consider testA depends on testB with result=*, but testB is filtered
      out by keyword. The DEPDIRS variable in testA's vvtest_util.py file
      included testB. This was considered a bug. Now testB is not in DEPDIRS.

    - Fix a crash (traceback) in a situation where one test depends on
      another test that will never run.

    - The user plugin functions prologue() and epilogue() were being called
      in the execution of batch jobs. Now they are not.

    - Under some circumstances, previous test results would not show up in
      the vvtest -i output, and some tests would fail to rerun when running
      inside the test results directory.

Changes:

    - If no tests are found with a "depends on" directive, then the test
      will not be run. Previously, the test would run even though no
      dependency tests were found.

    - The vvtest_util.py file contains the variables DEPDIRS and DEPDIRMAP.
      For parameterize/analyze test groups, the analyze test no longer
      contains the dependency test directory in the DEPDIRMAP. It is still
      in the DEPDIRS, however. The reason is that the DEPDIRMAP is meant to
      map the "depends on" glob pattern to the resulting directory(ies), but
      parameterize/analyze tests do not have a glob pattern.

    - The Git repository directory structure changed a bit. Effectively,
      the contents of the vvt directory is now at the top level. However,
      the install_vvtest still installs vvtest the same as before.

    - The -s option is now deprecated in favor of --search, which is a
      synomym.

    - The behavior of "-P <expression>" has changed slightly.  Since "-p
      np<4" means 'np' is a parameter in the test and np<4, it made sense
      for "-P np<4" to mean 'np' is NOT a parameter in the test OR np>=4.
      (Before this change, "-P np<4" was equivalent to "-p np>=4", which
      meant the test would get excluded if 'np' was not a parameter in the
      test.)

    - The console test list output default has changed for vvtest -i.  It
      now defaults to just writing the non-pass tests (the same as the
      default list output after a vvtest execution).  Use vvtest -iv to get
      the previous output behavior.

    - The console test list output format has changed.  Each test result
      line started with the test name, but not any more.  Also, the runtime
      of each test changed to hh:mm:ss.  For example,
      before:
          atest  pass       1s   10/06 11:21:53 TestResults.Linux/atest.np=4
      now:
          pass      0:01 10/06 11:21:53 TestResults.Linux/atest.np=4

    - The CONFIGDIR variable in the vvtest_util.py file for each test has
      changed type.  It was a string, but now a (possibly empty) python list.
      The only change for the same variable in vvtest_util.sh files is that
      is can now be a colon separated list of directories.

    - For XML specified tests, the variable TOOLSET_DIR has been changed
      to VVTESTSRC.  This name is consistent with the script form of test
      specifications.

    - The option given to a test when the command line -a, --analyze option
      was given to vvtest has changed.  If you use the vvtest_util helper,
      this should be transparent, but just in case, the new option is
      --execute-analysis-sections'.  The old option is now deprecated but
      still given, --execute_analysis_sections.


==============================================================================

Release 1.1
-----------

Sep 7, 2019

Improvements:

    - Add test staging.  You can now specify something like

        #VVT: parameterize (staged) : np = 1 8 1

      in test script headers.  This causes all parameterized tests to run
      in the same directory, but one at a time and in order.  Tests that are
      staged will have the "stage" parameter automatically added, which takes
      on the values 1, 2, 3, etc.

    - Add more intuitive way to disable tests.  You can now say

        #VVT: enable = false

      in test scripts to prevent the test from running.  It shows up as
      'skipped due to "disabled"'.

    - Add --gitlab <Git URL> option, which generates and pushes test results
      in GitLab markdown format to a Git repository as part of vvtest execution.
      It pushes at startup, every hour, and when finished.

    - Add --encode-exit-status command line option, which makes vvtest return
      non-zero if there are any non-passing or not-run tests.

    - Add test_preload() user plugin function.  If the vvtest_user_plugin
      file contains the function definition

        def test_preload( specs ):

      then it will be called just prior to each test execution. Modifications
      it makes to the environment will be felt by the test.  If the test script
      is NOT executable and this function returns a file path, the test will
      be run using that program (the main use case being to switch the python
      being used to run the test).

      Also, each test can define a preload label, for example

        #VVT: preload : somelabel

      In this case, the 'specs' dictionary argument to test_preload() will
      contain the entry

        'preload': 'somelabel'

      This allows each test to influence what the preload function does.

    - Add python plugin capability which can be used to adjust test timeouts
      and to validate tests against project standards.  The plugin file name
      is vvtest_user_plugin.py and can contain the function

        def test_timeout( spec_dict ):
            return 60

      and/or

        def validate_test( spec_dict ):
            return "reason for invalid test"

      The 'spec_dict' is a dictionary

            'keywords'   : list of keywords (strings)
            'parameters' : dictionary mapping parameter name to value
            'timeout'    : integer if test specifies a timeout, otherwise None
            'platform'   : platform name
            'options'    : list of options (strings)

    - Add console listing of skipped tests (the tests that were filtered out
      by -k or -p command line specifications, for example).  Using the extra
      verbose flag, -vv, the skips will be listed as part of the test results.

    - Add python script_utils functions to save and read arbitrary test data.
      The data is written to a file in the test execution directory.  For
      example, consider a test named "mytest",

          import script_utils as util
          util.save_test_data( runtime=34.7, result='pass' )

      The data can be read in as a dictionary from the current or a dependency
      test.  For example, if the following test depends on "mytest",

          import script_utils as util
          data = util.read_test_data( "mytest" )
          print ( 'mytest runtime is', data['runtime'] )

    - Add function to python script_utils to recursively find dependency tests.
      Use script_utils.deputils.find_depdir( testid ) to get the directory of
      a direct or indirect dependency test.

    - In script tests, the "testname" directive can be used instead of "test".
      For example, this specifies the test name to be "mytest",

          #VVT: testname = mytest

    - In script tests, "depends on" specifications can now be given in the
      test name directive, such as

          #VVT: testname = testA
          #VVT: testname = testB (depends on=testA, result="*")

Fixes:

    - Duplicate paths in DEPDIRS in vvtest_util.py file, issue #13.

    - Using the post clean option, -C, would incorrectly clean dependency
      tests coming from a general "depends on" specification.

Changes:

    - The basename of test files are now included in the (implicit) keyword
      list.  So you can use "-k name" to pick up all tests in 'name.vvt', for
      example.

    - The TIMEOUT variable is being deprecated; replaced with VVTEST_TIMEOUT.
      This environment variable is defined for each test, and is typically
      used to set a SIGALRM in MPI processes to ensure they shutdown.

    - The -v option has changed meaning.  It now means verbose.  Can be
      repeated for increased verbosity.

    - The console output format for listing tests has changed a little.
      Instead of

          virtualCyl   Exit   diff   6s   02/08 22:30:52 path/name

      it now would be

          virtualCyl   diff   6s   02/08 22:30:52 path/name

      and results keywords will be one of pass, diff, fail, notrun, notdone,
      or timeout.

    - In python script tests, "import script_util" will no longer import all
      the symbols from the vvtest_util.py file.  That is, instead of this in
      your test file,

          import script_util as util
          util.print3( 'NAME =', util.NAME )

      you now have to import vvtest_util.py separately,

          import vvtest_util as vvt
          import script_util as util
          util.print3( 'NAME =', vvt.NAME )

      or, of course, just dump all the symbols into the current namespace,

          from vvtest_util import *
          from script_util import *
          print3( 'NAME =', NAME )

    - The (argument) and (file) attributes to the "baseline" directive are no
      longer supported, such as

          #VVT: baseline (argument) : my-option
          #VVT: baseline (file) : filename

      Now an option can only start with a hyphen, such as

          #VVT: baseline : --my-option

      and a baseline script filename cannot contain a comma (because a comma
      is used to decide if you are specifying pairs of files).

    - The (argument) and (file) attributes to the "analyze" directive are no
      longer supported, such as

          #VVT: analyze (file) : analyze_script
          #VVT: analyze (argument) : analyze-option

      Now an option can only start with a hyphen, such as

          #VVT: analyze : --analyze-option

      otherwise a script file name is assumed.

    - Language selection of script tests has been simplified.  The new logic
      is that if the test file is executable, it is run directly.  If it is
      not executable, the python interpreter is run on the file.  This applies
      to the "analyze" and "baseline" directive keywords.

      A related aspect of this is that only (and always both) python and bash
      script util fragments are written to the test run directory.  Before
      this change, other languages were supported, such as csh.

    - The test list format used for running tests has changed.  It is now at
      version 32 and previous versions cannot be read.  This just means that
      a current test results area will have to be wiped and the tests run
      again.

    - trig: Remove unnecessary options -S -C and -a.  Use the runner script
      to launch now.

    - The command.py utility changed a default.  The Command.run functions
      now default raise_on_error to True.

    - Python 2.5 is no longer supported.

    - Using the deprecated option -F now exits with a failure.  It has been
      replaced by the -R option.

    - The -H option has been removed.  It is the same as --help and -h.

    - Option -v to get the version is deprecated.  Use --version instead.

    - Option --pipeline is deprecated.  Use --batch instead.

    - The --qsub-limit option is being deprecated in favor of --batch-limit
      (with the same meaning).  Similarly, --qsub-length is being deprecated
      in favor of --batch-length.

    - The --check=<name> option is deprecated.  Using --check=FOO just causes
      the environment variable CHECK_FOO to get defined.  The XML test format
      can check for environment variables using the 'ifdef' attribute.  So
      defining CHECK_FOO before running vvtest accomplishes the same thing.
      Also, the more general --test-args option is a better solution.

    - The --vg option has been removed.  It was used to run Valgrind on each
      test.  The same thing can be accomplished using --test-args.

    - The -G option has been removed.  It is historical.

    - The --junit test results output format has been enhanced a little.  It
      will now include the execute.log contents for tests that fail or diff.
      However, the middle of the file will be cut out if it is too big.


==============================================================================

Release 1.0
-----------

Aug 26, 2018

Improvements:

    - Add "insert directive file" keyword to test file preprocessing.  This
      allows test header specifications to include and share specifications
      from other files.

    - Port to python 3.  All python versions greater or equal to 2.5 should
      work.

    - Add --run-dir <directory> option.  This overrides the default naming
      scheme of the "TestResults.<platform>.ON=.OFF=" pattern.

    - Add additional test script utilties, such as simple_aprepro.

    - Add --test-args <arguments> option.  This passes arbitrary arguments
      into each test script at runtime.

    - Add arbitrary test dependencies.  A test can now depend on another test.
      The test will not run until the dependency is run, and the directory of
      the dependency test is made available so its output can be processed.
      The test directive keyword is "depends on".

Fixes:

    - Allow recursive vvtest invocations.  Tests being run in vvtest can now
      invoke vvtest.
